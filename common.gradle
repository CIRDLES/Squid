//
// This file is to be applied to every subproject.
//

apply plugin: 'java'
apply plugin: 'maven-publish'

String mavenGroupId = 'org.cirdles'
String mavenVersion = '1.8.6'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // Adding dependencies here will add the dependencies to each subproject.
    //compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
    implementation group: 'gov.nist.math', name: 'jama', version: '1.0.3'

    implementation "com.sun.activation:javax.activation:1.2.0"
    implementation "javax.xml.bind:jaxb-api:2.3.1"
    // https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-core
    implementation group: 'com.sun.xml.bind', name: 'jaxb-core', version: '3.0.2'
    // https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-impl
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.1'

    testImplementation "junit:junit:4.13.1"
    testImplementation "org.assertj:assertj-core:3.18.1"
}

String mavenArtifactId = name

group = mavenGroupId
version = mavenVersion

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}


task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    archiveClassifier.set("javadoc")
}



artifacts {
    archives jar
    archives sourcesJar
    //  Uncomment next line to produce javadocs
    //    archives packageJavadoc
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId =    mavenGroupId
            artifactId = mavenArtifactId
            version = mavenVersion

            from components.java
        }
    }
}

//configure(install.repositories.mavenInstaller) {
//    pom.project {
//        groupId = mavenGroupId
//        artifactId = mavenArtifactId
//        version = mavenVersion
//    }
//}

task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
    sourceSets*.allSource*.srcDirs*.each { File srcDir ->
        if (!srcDir.isDirectory()) {
            println "Creating source folder: ${srcDir}"
            srcDir.mkdirs()
        }
    }
}


tasks.withType(JavaCompile) {
    configure(options) {
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
    }
    println 'Compiler args: ' + options.compilerArgs
}

javadoc {
    options.tags = [
            'pre:a:Precondition:',
            'post:a:Postcondition:',
            'imports:a:Imports libraries:',
            'author:a:Author:'
    ]
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}